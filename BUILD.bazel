load("@rules_java//java:defs.bzl", "java_binary", "java_proto_library")

package(default_visibility = ["//visibility:public"])

# ============= Proto wrappers =================

java_proto_library(
    name = "service_config_java_proto",
    visibility = ["//:__subpackages__"],
    deps = [
        "@io_grpc_proto//:service_config_proto",
    ],
)

# ============= Binary targets ================

java_binary(
    name = "protoc-gen-java_gapic",
    main_class = "com.google.api.generator.Main",
    runtime_deps = [
        "//src/main/java/com/google/api/generator",
        "//src/main/java/com/google/api/generator/gapic",
        "@com_google_googleapis//google/api:api_java_proto",
        "@com_google_googleapis//google/longrunning:longrunning_java_proto",
        "@com_google_guava_guava",
        "@com_google_protobuf//:protobuf_java",
    ],
)

# Request dumper binary, which dumps the CodeGeneratorRequest to a file on disk
# which will be identical to the one passed to the protoc-gen-java_gapic during
# normal execution. The dumped file then can be used to run this gapic-generator
# directly (instead of relying on protoc to start the process), which would give
# much greater flexibility in terms of debugging features, like attaching a
# debugger, easier work with stdout and stderr etc.
#
# Usage example, via the rule in a corresponding BUILD.bazel file:
#
# load("@gapic_generator_java//rules_java_gapic:java_gapic.bzl", "java_generator_request_dump")
# java_generator_request_dump(
#     name = "compute_small_request_dump",
#     srcs = [":compute_small_proto_with_info"],
#     transport = "rest",
# )
#
java_binary(
    name = "protoc-gen-code_generator_request_dumper",
    main_class = "com.google.api.generator.debug.CodeGeneratorRequestDumper",
    runtime_deps = [
        "//src/main/java/com/google/api/generator",
        "//src/main/java/com/google/api/generator/debug",
        "//src/main/java/com/google/api/generator/gapic",
        "@com_google_googleapis//google/api:api_java_proto",
        "@com_google_googleapis//google/longrunning:longrunning_java_proto",
        "@com_google_guava_guava",
        "@com_google_protobuf//:protobuf_java",
    ],
)

# A binary similar to protoc-gen-java_gapic but reads the CodeGeneratorRequest
# directly from a file instead of relying on protoc to pipe it in.
#
# Usage example:
#
# bazel run code_generator_request_file_to_gapic_main desc-dump.bin dump.jar
#
java_binary(
    name = "code_generator_request_file_to_gapic_main",
    main_class = "com.google.api.generator.debug.CodeGeneratorRequestFileToGapicMain",
    runtime_deps = [
        "//src/main/java/com/google/api/generator",
        "//src/main/java/com/google/api/generator/debug",
        "//src/main/java/com/google/api/generator/gapic",
        "@com_google_googleapis//google/api:api_java_proto",
        "@com_google_googleapis//google/longrunning:longrunning_java_proto",
        "@com_google_guava_guava",
        "@com_google_protobuf//:protobuf_java",
    ],
)

# google-java-format
java_binary(
    name = "google_java_format_binary",
    jvm_flags = ["-Xmx512m"],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google_java_format_all_deps//jar"],
)

genrule(
    name = "google_java_format",
    outs = ["google_java_format.sh"],
    cmd = "echo 'find src test -name \'*.java\' | grep -v /goldens/ | xargs $(execpath :google_java_format_binary) --replace' > $(OUTS)",
    executable = 1,
    tools = [":google_java_format_binary"],
    local = 1,
)

# Run `bazel build //:google_java_format_verification` to verify that gapic-generator-java sources
# are formatted correctly.
genrule(
    name = "google_java_format_verification",
    outs = ["google_java_format_verification.sh"],
    cmd = "echo 'find src test -name \'*.java\' | grep -v /goldens/ | xargs $(execpath :google_java_format_binary) --dry-run --set-exit-if-changed' > $(OUTS)",
    executable = 1,
    tools = [":google_java_format_binary"],
    local = 1,
)
