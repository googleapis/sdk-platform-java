load("@rules_java//java:defs.bzl", "java_binary", "java_proto_library")

package(default_visibility = ["//visibility:public"])

java_proto_library(
    name = "service_config_java_proto",
    deps = ["@io_grpc_proto//:service_config_proto"],
)

proto_library(
    name = "test_protos",
    srcs = glob(["src/test/resources/*.proto"]),
    deps = [
        "@com_google_googleapis//google/api:annotations_proto",
        "@com_google_googleapis//google/api:client_proto",
        "@com_google_googleapis//google/api:field_behavior_proto",
        "@com_google_googleapis//google/api:routing_proto",
        "@com_google_googleapis//google/api:resource_proto",
        "@com_google_googleapis//google/cloud:extended_operations_proto",
        "@com_google_googleapis//google/longrunning:operations_proto",
        "@com_google_googleapis//google/rpc:error_details_proto",
        "@com_google_googleapis//google/rpc:status_proto",
        "@com_google_protobuf//:duration_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:field_mask_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
)
java_proto_library(
    name = "test_java_protos",
    deps = [
        ":test_protos",
        "@com_google_googleapis//google/cloud:common_resources_proto"
    ],
)

java_import(
    name = "gapic_generator_java",
    # Note referring to target/ is only for local development; you can also pull from remote
    # filesystem, GCS bucket, Maven repositories, etc.
    jars = ["target/gapic-generator-java-0.0.1-SNAPSHOT.jar"],
)
java_binary(
    name = "protoc-gen-java_gapic",
    main_class = "com.google.api.generator.Main",
    runtime_deps = ["gapic_generator_java"]
)

# Request dumper binary, which dumps the CodeGeneratorRequest to a file on disk
# which will be identical to the one passed to the protoc-gen-java_gapic during
# normal execution. The dumped file then can be used to run this gapic-generator
# directly (instead of relying on protoc to start the process), which would give
# much greater flexibility in terms of debugging features, like attaching a
# debugger, easier work with stdout and stderr etc.
#
# Usage example, via the rule in a corresponding BUILD.bazel file:
#
# load("@gapic_generator_java//rules_java_gapic:java_gapic.bzl", "java_generator_request_dump")
# java_generator_request_dump(
#     name = "compute_small_request_dump",
#     srcs = [":compute_small_proto_with_info"],
#     transport = "rest",
# )
#
java_binary(
    name = "protoc-gen-code_generator_request_dumper",
    main_class = "com.google.api.generator.debug.CodeGeneratorRequestDumper",
    runtime_deps = ["gapic_generator_java"],
)

# A binary similar to protoc-gen-java_gapic but reads the CodeGeneratorRequest
# directly from a file instead of relying on protoc to pipe it in.
#
# Usage example:
#
# bazel run code_generator_request_file_to_gapic_main desc-dump.bin dump.jar
#
java_binary(
    name = "code_generator_request_file_to_gapic_main",
    main_class = "com.google.api.generator.debug.CodeGeneratorRequestFileToGapicMain",
    runtime_deps = ["gapic_generator_java"],
)

# another test resource
genrule(
    name = "basic_proto_descriptor",
    srcs = ["src/test/resources/basic.proto"],
    outs = ["basic_proto.descriptor"],
    cmd = "$(location @com_google_protobuf//:protoc) " +
          "--include_source_info --include_imports --descriptor_set_out=$(OUTS) $(SRCS)",
    message = "Generating proto descriptor",
    tools = ["@com_google_protobuf//:protoc"],
)

# Tests that generate and save unit golden (.golden) files.
GOLDEN_UPDATING_UNIT_TESTS = [
    "com.google.api.generator.engine.JavaCodeGeneratorTest",
    "com.google.api.generator.gapic.composer.ComposerTest",
    "com.google.api.generator.gapic.composer.common.BatchingDescriptorComposerTest",
    "com.google.api.generator.gapic.composer.grpc.GrpcServiceCallableFactoryClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.GrpcServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.MockServiceClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.MockServiceImplClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceClientClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceClientTestClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.grpc.ServiceStubSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.resourcename.ResourceNameHelperClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.HttpJsonServiceCallableFactoryClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.HttpJsonServiceStubClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.ServiceClientTestClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.ServiceSettingsClassComposerTest",
    "com.google.api.generator.gapic.composer.rest.ServiceStubSettingsClassComposerTest",
]

# google-java-format
java_binary(
    name = "google_java_format_binary",
    jvm_flags = ["-Xmx512m"],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google_java_format_all_deps//jar"],
)
