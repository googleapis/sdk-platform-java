package com.google.resource.name.test;

import static com.google.resource.name.test.ResourceNameClient.ListResourcesNoMethodSignaturePagedResponse;
import static com.google.resource.name.test.ResourceNameClient.ListResourcesPagedResponse;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.testing.LocalChannelProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.common.collect.Lists;
import com.google.protobuf.AbstractMessage;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import javax.annotation.Generated;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@Generated("by gapic-generator-java")
public class ResourceNameClientTest {
  private static MockResourceName mockResourceName;
  private static MockServiceHelper mockServiceHelper;
  private LocalChannelProvider channelProvider;
  private ResourceNameClient client;

  @BeforeClass
  public static void startStaticServer() {
    mockResourceName = new MockResourceName();
    mockServiceHelper =
        new MockServiceHelper(
            UUID.randomUUID().toString(), Arrays.<MockGrpcService>asList(mockResourceName));
    mockServiceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    mockServiceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    mockServiceHelper.reset();
    channelProvider = mockServiceHelper.createChannelProvider();
    ResourceNameSettings settings =
        ResourceNameSettings.newBuilder()
            .setTransportChannelProvider(channelProvider)
            .setCredentialsProvider(NoCredentialsProvider.create())
            .build();
    client = ResourceNameClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

  @Test
  public void getResourceTest() throws Exception {
    Resource expectedResponse =
        Resource.newBuilder()
            .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
            .build();
    mockResourceName.addResponse(expectedResponse);

    ResourceName name = ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]");

    Resource actualResponse = client.getResource(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetResourceRequest actualRequest = ((GetResourceRequest) actualRequests.get(0));

    Assert.assertEquals(name.toString(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void getResourceExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      ResourceName name = ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]");
      client.getResource(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void getResourceTest2() throws Exception {
    Resource expectedResponse =
        Resource.newBuilder()
            .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
            .build();
    mockResourceName.addResponse(expectedResponse);

    String name = "name3373707";

    Resource actualResponse = client.getResource(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetResourceRequest actualRequest = ((GetResourceRequest) actualRequests.get(0));

    Assert.assertEquals(name, actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void getResourceExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      String name = "name3373707";
      client.getResource(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void listResourcesTest() throws Exception {
    Resource responsesElement = Resource.newBuilder().build();
    ListResourcesResponse expectedResponse =
        ListResourcesResponse.newBuilder()
            .setNextPageToken("")
            .addAllResources(Arrays.asList(responsesElement))
            .build();
    mockResourceName.addResponse(expectedResponse);

    ParentResourceName parent = ParentResourceName.of("[PARENTRESOURCE]");

    ListResourcesPagedResponse pagedListResponse = client.listResources(parent);

    List<Resource> resources = Lists.newArrayList(pagedListResponse.iterateAll());

    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getResourcesList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListResourcesRequest actualRequest = ((ListResourcesRequest) actualRequests.get(0));

    Assert.assertEquals(parent.toString(), actualRequest.getParent());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void listResourcesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      ParentResourceName parent = ParentResourceName.of("[PARENTRESOURCE]");
      client.listResources(parent);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void listResourcesTest2() throws Exception {
    Resource responsesElement = Resource.newBuilder().build();
    ListResourcesResponse expectedResponse =
        ListResourcesResponse.newBuilder()
            .setNextPageToken("")
            .addAllResources(Arrays.asList(responsesElement))
            .build();
    mockResourceName.addResponse(expectedResponse);

    String parent = "parent-995424086";

    ListResourcesPagedResponse pagedListResponse = client.listResources(parent);

    List<Resource> resources = Lists.newArrayList(pagedListResponse.iterateAll());

    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getResourcesList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListResourcesRequest actualRequest = ((ListResourcesRequest) actualRequests.get(0));

    Assert.assertEquals(parent, actualRequest.getParent());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void listResourcesExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      String parent = "parent-995424086";
      client.listResources(parent);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void getResourceNoMethodSignatureTest() throws Exception {
    Resource expectedResponse =
        Resource.newBuilder()
            .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
            .build();
    mockResourceName.addResponse(expectedResponse);

    GetResourceRequest request =
        GetResourceRequest.newBuilder()
            .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
            .build();

    Resource actualResponse = client.getResourceNoMethodSignature(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetResourceRequest actualRequest = ((GetResourceRequest) actualRequests.get(0));

    Assert.assertEquals(request.getName(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void getResourceNoMethodSignatureExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      GetResourceRequest request =
          GetResourceRequest.newBuilder()
              .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
              .build();
      client.getResourceNoMethodSignature(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void listResourcesNoMethodSignatureTest() throws Exception {
    Resource responsesElement = Resource.newBuilder().build();
    ListResourcesResponse expectedResponse =
        ListResourcesResponse.newBuilder()
            .setNextPageToken("")
            .addAllResources(Arrays.asList(responsesElement))
            .build();
    mockResourceName.addResponse(expectedResponse);

    ListResourcesRequest request =
        ListResourcesRequest.newBuilder()
            .setParent(ParentResourceName.of("[PARENTRESOURCE]").toString())
            .setPageSize(883849137)
            .setPageToken("pageToken873572522")
            .build();

    ListResourcesNoMethodSignaturePagedResponse pagedListResponse =
        client.listResourcesNoMethodSignature(request);

    List<Resource> resources = Lists.newArrayList(pagedListResponse.iterateAll());

    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getResourcesList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListResourcesRequest actualRequest = ((ListResourcesRequest) actualRequests.get(0));

    Assert.assertEquals(request.getParent(), actualRequest.getParent());
    Assert.assertEquals(request.getPageSize(), actualRequest.getPageSize());
    Assert.assertEquals(request.getPageToken(), actualRequest.getPageToken());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void listResourcesNoMethodSignatureExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      ListResourcesRequest request =
          ListResourcesRequest.newBuilder()
              .setParent(ParentResourceName.of("[PARENTRESOURCE]").toString())
              .setPageSize(883849137)
              .setPageToken("pageToken873572522")
              .build();
      client.listResourcesNoMethodSignature(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void noMatchResourceTest() throws Exception {
    NoMatchResourceResponse expectedResponse =
        NoMatchResourceResponse.newBuilder().setResponse("response-340323263").build();
    mockResourceName.addResponse(expectedResponse);

    NoMatchResourceRequest request =
        NoMatchResourceRequest.newBuilder()
            .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
            .build();

    NoMatchResourceResponse actualResponse = client.noMatchResource(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    NoMatchResourceRequest actualRequest = ((NoMatchResourceRequest) actualRequests.get(0));

    Assert.assertEquals(request.getName(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void noMatchResourceExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      NoMatchResourceRequest request =
          NoMatchResourceRequest.newBuilder()
              .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
              .build();
      client.noMatchResource(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void noBindingsTest() throws Exception {
    NoMatchResourceResponse expectedResponse =
        NoMatchResourceResponse.newBuilder().setResponse("response-340323263").build();
    mockResourceName.addResponse(expectedResponse);

    NoMatchResourceRequest request =
        NoMatchResourceRequest.newBuilder()
            .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
            .build();

    NoMatchResourceResponse actualResponse = client.noBindings(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    NoMatchResourceRequest actualRequest = ((NoMatchResourceRequest) actualRequests.get(0));

    Assert.assertEquals(request.getName(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void noBindingsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      NoMatchResourceRequest request =
          NoMatchResourceRequest.newBuilder()
              .setName(ResourceName.of("[PARENTRESOURCE]", "[RESOURCE]").toString())
              .build();
      client.noBindings(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void wildcardResourceReferenceTest() throws Exception {
    WildcardResourceResponse expectedResponse =
        WildcardResourceResponse.newBuilder().setResponse("response-340323263").build();
    mockResourceName.addResponse(expectedResponse);

    WildcardResourceRequest request =
        WildcardResourceRequest.newBuilder()
            .setName(ParentResourceName.of("[PARENTRESOURCE]").toString())
            .build();

    WildcardResourceResponse actualResponse = client.wildcardResourceReference(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    WildcardResourceRequest actualRequest = ((WildcardResourceRequest) actualRequests.get(0));

    Assert.assertEquals(request.getName(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void wildcardResourceReferenceExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      WildcardResourceRequest request =
          WildcardResourceRequest.newBuilder()
              .setName(ParentResourceName.of("[PARENTRESOURCE]").toString())
              .build();
      client.wildcardResourceReference(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void wildcardResourceReferenceStrictBindingsTest() throws Exception {
    WildcardResourceResponse expectedResponse =
        WildcardResourceResponse.newBuilder().setResponse("response-340323263").build();
    mockResourceName.addResponse(expectedResponse);

    WildcardResourceRequest request =
        WildcardResourceRequest.newBuilder()
            .setName(ParentResourceName.of("[PARENTRESOURCE]").toString())
            .build();

    WildcardResourceResponse actualResponse =
        client.wildcardResourceReferenceStrictBindings(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockResourceName.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    WildcardResourceRequest actualRequest = ((WildcardResourceRequest) actualRequests.get(0));

    Assert.assertEquals(request.getName(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void wildcardResourceReferenceStrictBindingsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockResourceName.addException(exception);

    try {
      WildcardResourceRequest request =
          WildcardResourceRequest.newBuilder()
              .setName(ParentResourceName.of("[PARENTRESOURCE]").toString())
              .build();
      client.wildcardResourceReferenceStrictBindings(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }
}
