package com.google.showcase.v1beta1;

import static com.google.showcase.v1beta1.EchoClient.PagedExpandPagedResponse;
import static com.google.showcase.v1beta1.EchoClient.SimplePagedExpandPagedResponse;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.testing.LocalChannelProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.grpc.testing.MockStreamObserver;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ApiStreamObserver;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.Lists;
import com.google.longrunning.Operation;
import com.google.protobuf.AbstractMessage;
import com.google.protobuf.Any;
import com.google.protobuf.Duration;
import com.google.protobuf.Timestamp;
import com.google.rpc.Status;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import javax.annotation.Generated;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@Generated("by gapic-generator-java")
public class EchoClientTest {
  private static MockEcho mockEcho;
  private static MockServiceHelper mockServiceHelper;
  private LocalChannelProvider channelProvider;
  private EchoClient client;

  @BeforeClass
  public static void startStaticServer() {
    mockEcho = new MockEcho();
    mockServiceHelper =
        new MockServiceHelper(
            UUID.randomUUID().toString(), Arrays.<MockGrpcService>asList(mockEcho));
    mockServiceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    mockServiceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    mockServiceHelper.reset();
    channelProvider = mockServiceHelper.createChannelProvider();
    EchoSettings settings =
        EchoSettings.newBuilder()
            .setTransportChannelProvider(channelProvider)
            .setCredentialsProvider(NoCredentialsProvider.create())
            .build();
    client = EchoClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

  @Test
  public void echoTest() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    EchoResponse actualResponse = client.echo();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      EchoRequest request =
          EchoRequest.newBuilder()
              .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
              .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
              .setSeverity(Severity.forNumber(0))
              .setFoobar(Foobar.newBuilder().build())
              .build();
      client.echo(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest2() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    ResourceName parent = FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]");

    EchoResponse actualResponse = client.echo(parent);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(parent.toString(), actualRequest.getParent());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      ResourceName parent = FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]");
      client.echo(parent);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest3() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    Status error = Status.newBuilder().build();

    EchoResponse actualResponse = client.echo(error);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(error, actualRequest.getError());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest3() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      Status error = Status.newBuilder().build();
      client.echo(error);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest4() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    FoobarName name = FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]");

    EchoResponse actualResponse = client.echo(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(name.toString(), actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest4() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      FoobarName name = FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]");
      client.echo(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest5() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    String content = "content951530617";

    EchoResponse actualResponse = client.echo(content);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(content, actualRequest.getContent());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest5() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      String content = "content951530617";
      client.echo(content);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest6() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    String name = "name3373707";

    EchoResponse actualResponse = client.echo(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(name, actualRequest.getName());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest6() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      String name = "name3373707";
      client.echo(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest7() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    String parent = "parent-995424086";

    EchoResponse actualResponse = client.echo(parent);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(parent, actualRequest.getParent());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest7() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      String parent = "parent-995424086";
      client.echo(parent);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void echoTest8() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);

    String content = "content951530617";
    Severity severity = Severity.forNumber(0);

    EchoResponse actualResponse = client.echo(content, severity);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(content, actualRequest.getContent());
    Assert.assertEquals(severity, actualRequest.getSeverity());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void echoExceptionTest8() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      String content = "content951530617";
      Severity severity = Severity.forNumber(0);
      client.echo(content, severity);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void expandTest() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);
    ExpandRequest request =
        ExpandRequest.newBuilder().setContent("content951530617").setInfo("info3237038").build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    ServerStreamingCallable<ExpandRequest, EchoResponse> callable = client.expandCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<EchoResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  public void expandExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);
    ExpandRequest request =
        ExpandRequest.newBuilder().setContent("content951530617").setInfo("info3237038").build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    ServerStreamingCallable<ExpandRequest, EchoResponse> callable = client.expandCallable();
    callable.serverStreamingCall(request, responseObserver);

    try {
      List<EchoResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void collectTest() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);
    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    ClientStreamingCallable<EchoRequest, EchoResponse> callable = client.collectCallable();
    ApiStreamObserver<EchoRequest> requestObserver = callable.clientStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<EchoResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  public void collectExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);
    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    ClientStreamingCallable<EchoRequest, EchoResponse> callable = client.collectCallable();
    ApiStreamObserver<EchoRequest> requestObserver = callable.clientStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<EchoResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void chatTest() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);
    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<EchoRequest, EchoResponse> callable = client.chatCallable();
    ApiStreamObserver<EchoRequest> requestObserver = callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<EchoResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  public void chatExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);
    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<EchoRequest, EchoResponse> callable = client.chatCallable();
    ApiStreamObserver<EchoRequest> requestObserver = callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<EchoResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void chatAgainTest() throws Exception {
    EchoResponse expectedResponse =
        EchoResponse.newBuilder()
            .setContent("content951530617")
            .setSeverity(Severity.forNumber(0))
            .build();
    mockEcho.addResponse(expectedResponse);
    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<EchoRequest, EchoResponse> callable = client.chatAgainCallable();
    ApiStreamObserver<EchoRequest> requestObserver = callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<EchoResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  public void chatAgainExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);
    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    MockStreamObserver<EchoResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<EchoRequest, EchoResponse> callable = client.chatAgainCallable();
    ApiStreamObserver<EchoRequest> requestObserver = callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<EchoResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void pagedExpandTest() throws Exception {
    EchoResponse responsesElement = EchoResponse.newBuilder().build();
    PagedExpandResponse expectedResponse =
        PagedExpandResponse.newBuilder()
            .setNextPageToken("")
            .addAllResponses(Arrays.asList(responsesElement))
            .build();
    mockEcho.addResponse(expectedResponse);

    PagedExpandRequest request =
        PagedExpandRequest.newBuilder()
            .setContent("content951530617")
            .setPageSize(883849137)
            .setPageToken("pageToken873572522")
            .build();

    PagedExpandPagedResponse pagedListResponse = client.pagedExpand(request);

    List<EchoResponse> resources = Lists.newArrayList(pagedListResponse.iterateAll());

    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getResponsesList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    PagedExpandRequest actualRequest = ((PagedExpandRequest) actualRequests.get(0));

    Assert.assertEquals(request.getContent(), actualRequest.getContent());
    Assert.assertEquals(request.getPageSize(), actualRequest.getPageSize());
    Assert.assertEquals(request.getPageToken(), actualRequest.getPageToken());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void pagedExpandExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      PagedExpandRequest request =
          PagedExpandRequest.newBuilder()
              .setContent("content951530617")
              .setPageSize(883849137)
              .setPageToken("pageToken873572522")
              .build();
      client.pagedExpand(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void simplePagedExpandTest() throws Exception {
    EchoResponse responsesElement = EchoResponse.newBuilder().build();
    PagedExpandResponse expectedResponse =
        PagedExpandResponse.newBuilder()
            .setNextPageToken("")
            .addAllResponses(Arrays.asList(responsesElement))
            .build();
    mockEcho.addResponse(expectedResponse);

    SimplePagedExpandPagedResponse pagedListResponse = client.simplePagedExpand();

    List<EchoResponse> resources = Lists.newArrayList(pagedListResponse.iterateAll());

    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getResponsesList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    PagedExpandRequest actualRequest = ((PagedExpandRequest) actualRequests.get(0));

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void simplePagedExpandExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      PagedExpandRequest request =
          PagedExpandRequest.newBuilder()
              .setContent("content951530617")
              .setPageSize(883849137)
              .setPageToken("pageToken873572522")
              .build();
      client.simplePagedExpand(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void waitTest() throws Exception {
    WaitResponse expectedResponse =
        WaitResponse.newBuilder().setContent("content951530617").build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("waitTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockEcho.addResponse(resultOperation);

    Duration ttl = Duration.newBuilder().build();

    WaitResponse actualResponse = client.waitAsync(ttl).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    WaitRequest actualRequest = ((WaitRequest) actualRequests.get(0));

    Assert.assertEquals(ttl, actualRequest.getTtl());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void waitExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      Duration ttl = Duration.newBuilder().build();
      client.waitAsync(ttl).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void waitTest2() throws Exception {
    WaitResponse expectedResponse =
        WaitResponse.newBuilder().setContent("content951530617").build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("waitTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockEcho.addResponse(resultOperation);

    Timestamp endTime = Timestamp.newBuilder().build();

    WaitResponse actualResponse = client.waitAsync(endTime).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    WaitRequest actualRequest = ((WaitRequest) actualRequests.get(0));

    Assert.assertEquals(endTime, actualRequest.getEndTime());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void waitExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      Timestamp endTime = Timestamp.newBuilder().build();
      client.waitAsync(endTime).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void blockTest() throws Exception {
    BlockResponse expectedResponse =
        BlockResponse.newBuilder().setContent("content951530617").build();
    mockEcho.addResponse(expectedResponse);

    BlockRequest request = BlockRequest.newBuilder().build();

    BlockResponse actualResponse = client.block(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    BlockRequest actualRequest = ((BlockRequest) actualRequests.get(0));

    Assert.assertEquals(request.getResponseDelay(), actualRequest.getResponseDelay());
    Assert.assertEquals(request.getError(), actualRequest.getError());
    Assert.assertEquals(request.getSuccess(), actualRequest.getSuccess());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void blockExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      BlockRequest request = BlockRequest.newBuilder().build();
      client.block(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void collideNameTest() throws Exception {
    Object expectedResponse = Object.newBuilder().setContent("content951530617").build();
    mockEcho.addResponse(expectedResponse);

    EchoRequest request =
        EchoRequest.newBuilder()
            .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
            .setSeverity(Severity.forNumber(0))
            .setFoobar(Foobar.newBuilder().build())
            .build();

    Object actualResponse = client.collideName(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockEcho.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EchoRequest actualRequest = ((EchoRequest) actualRequests.get(0));

    Assert.assertEquals(request.getName(), actualRequest.getName());
    Assert.assertEquals(request.getParent(), actualRequest.getParent());
    Assert.assertEquals(request.getContent(), actualRequest.getContent());
    Assert.assertEquals(request.getError(), actualRequest.getError());
    Assert.assertEquals(request.getSeverity(), actualRequest.getSeverity());
    Assert.assertEquals(request.getFoobar(), actualRequest.getFoobar());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void collideNameExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockEcho.addException(exception);

    try {
      EchoRequest request =
          EchoRequest.newBuilder()
              .setName(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
              .setParent(FoobarName.ofProjectFoobarName("[PROJECT]", "[FOOBAR]").toString())
              .setSeverity(Severity.forNumber(0))
              .setFoobar(Foobar.newBuilder().build())
              .build();
      client.collideName(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }
}
