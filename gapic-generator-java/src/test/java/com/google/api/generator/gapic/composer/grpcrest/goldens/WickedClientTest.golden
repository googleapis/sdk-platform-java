package com.google.showcase.v1beta1;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.testing.LocalChannelProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.grpc.testing.MockStreamObserver;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ApiStreamObserver;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.StatusCode;
import com.google.protobuf.AbstractMessage;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import javax.annotation.Generated;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@Generated("by gapic-generator-java")
public class WickedClientTest {
  private static MockServiceHelper mockServiceHelper;
  private static MockWicked mockWicked;
  private LocalChannelProvider channelProvider;
  private WickedClient client;

  @BeforeClass
  public static void startStaticServer() {
    mockWicked = new MockWicked();
    mockServiceHelper =
        new MockServiceHelper(
            UUID.randomUUID().toString(), Arrays.<MockGrpcService>asList(mockWicked));
    mockServiceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    mockServiceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    mockServiceHelper.reset();
    channelProvider = mockServiceHelper.createChannelProvider();
    WickedSettings settings =
        WickedSettings.newBuilder()
            .setTransportChannelProvider(channelProvider)
            .setCredentialsProvider(NoCredentialsProvider.create())
            .build();
    client = WickedClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

  @Test
  public void craftEvilPlanTest() throws Exception {
    EvilResponse expectedResponse =
        EvilResponse.newBuilder().setMaliciousPlan("maliciousPlan712757759").build();
    mockWicked.addResponse(expectedResponse);

    EvilRequest request =
        EvilRequest.newBuilder().setMaliciousIdea("maliciousIdea712541645").build();

    EvilResponse actualResponse = client.craftEvilPlan(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockWicked.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    EvilRequest actualRequest = ((EvilRequest) actualRequests.get(0));

    Assert.assertEquals(request.getMaliciousIdea(), actualRequest.getMaliciousIdea());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  public void craftEvilPlanExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockWicked.addException(exception);

    try {
      EvilRequest request =
          EvilRequest.newBuilder().setMaliciousIdea("maliciousIdea712541645").build();
      client.craftEvilPlan(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception.
    }
  }

  @Test
  public void brainstormEvilPlansTest() throws Exception {
    EvilResponse expectedResponse =
        EvilResponse.newBuilder().setMaliciousPlan("maliciousPlan712757759").build();
    mockWicked.addResponse(expectedResponse);
    EvilRequest request =
        EvilRequest.newBuilder().setMaliciousIdea("maliciousIdea712541645").build();

    MockStreamObserver<EvilResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<EvilRequest, EvilResponse> callable =
        client.brainstormEvilPlansCallable();
    ApiStreamObserver<EvilRequest> requestObserver = callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<EvilResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  public void brainstormEvilPlansExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockWicked.addException(exception);
    EvilRequest request =
        EvilRequest.newBuilder().setMaliciousIdea("maliciousIdea712541645").build();

    MockStreamObserver<EvilResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<EvilRequest, EvilResponse> callable =
        client.brainstormEvilPlansCallable();
    ApiStreamObserver<EvilRequest> requestObserver = callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<EvilResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  public void persuadeEvilPlanTest() throws Exception {
    EvilResponse expectedResponse =
        EvilResponse.newBuilder().setMaliciousPlan("maliciousPlan712757759").build();
    mockWicked.addResponse(expectedResponse);
    EvilRequest request =
        EvilRequest.newBuilder().setMaliciousIdea("maliciousIdea712541645").build();

    MockStreamObserver<EvilResponse> responseObserver = new MockStreamObserver<>();

    ClientStreamingCallable<EvilRequest, EvilResponse> callable = client.persuadeEvilPlanCallable();
    ApiStreamObserver<EvilRequest> requestObserver = callable.clientStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<EvilResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  public void persuadeEvilPlanExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(io.grpc.Status.INVALID_ARGUMENT);
    mockWicked.addException(exception);
    EvilRequest request =
        EvilRequest.newBuilder().setMaliciousIdea("maliciousIdea712541645").build();

    MockStreamObserver<EvilResponse> responseObserver = new MockStreamObserver<>();

    ClientStreamingCallable<EvilRequest, EvilResponse> callable = client.persuadeEvilPlanCallable();
    ApiStreamObserver<EvilRequest> requestObserver = callable.clientStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<EvilResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = ((InvalidArgumentException) e.getCause());
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }
}
