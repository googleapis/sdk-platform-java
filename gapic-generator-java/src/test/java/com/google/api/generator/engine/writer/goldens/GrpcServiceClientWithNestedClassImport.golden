package com.google.types.testing;

import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.testgapic.v1beta1.Outer;
import com.google.types.testing.stub.NestedMessageServiceStub;
import com.google.types.testing.stub.NestedMessageServiceStubSettings;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * This class provides the ability to make remote calls to the backing service through method calls
 * that map to API methods. Sample code to get started:
 *
 * <pre>{@code
 * // This snippet has been automatically generated and should be regarded as a code template only.
 * // It will require modifications to work:
 * // - It may require correct/in-range values for request initialization.
 * // - It may require specifying regional endpoints when creating the service client as shown in
 * // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library
 * try (NestedMessageServiceClient nestedMessageServiceClient =
 *     NestedMessageServiceClient.create()) {
 *   Outer.Middle request = Outer.Middle.newBuilder().setX(120).build();
 *   Outer.Middle.Inner response = nestedMessageServiceClient.nestedMessageMethod(request);
 * }
 * }</pre>
 *
 * <p>Note: close() needs to be called on the NestedMessageServiceClient object to clean up
 * resources such as threads. In the example above, try-with-resources is used, which automatically
 * calls close().
 *
 * <table>
 *    <tr>
 *      <th>Method</th>
 *      <th>Description</th>
 *      <th>Method Variants</th>
 *    <tr>
 *      <td>NestedMessageMethod</td>
 *      <td><p></p></td>
 *      <td>
 *      <p>Request object method variants only take one parameter, a request object, which must be constructed before the call.</p>
 *      <ul>
 *           <li>nestedMessageMethod(Outer.Middle request)
 *      </ul>
 *      <p>Callable method variants take no parameters and return an immutable API callable object, which can be used to initiate calls to the service.</p>
 *      <ul>
 *           <li>nestedMessageMethodCallable()
 *      </ul>
 *       </td>
 *    </tr>
 *    </tr>
 *  </table>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist with
 * these names, this class includes a format method for each type of name, and additionally a parse
 * method to extract the individual identifiers contained within names that are returned.
 *
 * <p>This class can be customized by passing in a custom instance of NestedMessageServiceSettings
 * to create(). For example:
 *
 * <p>To customize credentials:
 *
 * <pre>{@code
 * // This snippet has been automatically generated and should be regarded as a code template only.
 * // It will require modifications to work:
 * // - It may require correct/in-range values for request initialization.
 * // - It may require specifying regional endpoints when creating the service client as shown in
 * // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library
 * NestedMessageServiceSettings nestedMessageServiceSettings =
 *     NestedMessageServiceSettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * NestedMessageServiceClient nestedMessageServiceClient =
 *     NestedMessageServiceClient.create(nestedMessageServiceSettings);
 * }</pre>
 *
 * <p>To customize the endpoint:
 *
 * <pre>{@code
 * // This snippet has been automatically generated and should be regarded as a code template only.
 * // It will require modifications to work:
 * // - It may require correct/in-range values for request initialization.
 * // - It may require specifying regional endpoints when creating the service client as shown in
 * // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library
 * NestedMessageServiceSettings nestedMessageServiceSettings =
 *     NestedMessageServiceSettings.newBuilder().setEndpoint(myEndpoint).build();
 * NestedMessageServiceClient nestedMessageServiceClient =
 *     NestedMessageServiceClient.create(nestedMessageServiceSettings);
 * }</pre>
 *
 * <p>Please refer to the GitHub repository's samples for more quickstart code snippets.
 */
@Generated("by gapic-generator-java")
public class NestedMessageServiceClient implements BackgroundResource {
  private final NestedMessageServiceSettings settings;
  private final NestedMessageServiceStub stub;

  /** Constructs an instance of NestedMessageServiceClient with default settings. */
  public static final NestedMessageServiceClient create() throws IOException {
    return create(NestedMessageServiceSettings.newBuilder().build());
  }

  /**
   * Constructs an instance of NestedMessageServiceClient, using the given settings. The channels
   * are created based on the settings passed in, or defaults for any settings that are not set.
   */
  public static final NestedMessageServiceClient create(NestedMessageServiceSettings settings)
      throws IOException {
    return new NestedMessageServiceClient(settings);
  }

  /**
   * Constructs an instance of NestedMessageServiceClient, using the given stub for making calls.
   * This is for advanced usage - prefer using create(NestedMessageServiceSettings).
   */
  public static final NestedMessageServiceClient create(NestedMessageServiceStub stub) {
    return new NestedMessageServiceClient(stub);
  }

  /**
   * Constructs an instance of NestedMessageServiceClient, using the given settings. This is
   * protected so that it is easy to make a subclass, but otherwise, the static factory methods
   * should be preferred.
   */
  protected NestedMessageServiceClient(NestedMessageServiceSettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((NestedMessageServiceStubSettings) settings.getStubSettings()).createStub();
  }

  protected NestedMessageServiceClient(NestedMessageServiceStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final NestedMessageServiceSettings getSettings() {
    return settings;
  }

  public NestedMessageServiceStub getStub() {
    return stub;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Sample code:
   *
   * <pre>{@code
   * // This snippet has been automatically generated and should be regarded as a code template only.
   * // It will require modifications to work:
   * // - It may require correct/in-range values for request initialization.
   * // - It may require specifying regional endpoints when creating the service client as shown in
   * // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library
   * try (NestedMessageServiceClient nestedMessageServiceClient =
   *     NestedMessageServiceClient.create()) {
   *   Outer.Middle request = Outer.Middle.newBuilder().setX(120).build();
   *   Outer.Middle.Inner response = nestedMessageServiceClient.nestedMessageMethod(request);
   * }
   * }</pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Outer.Middle.Inner nestedMessageMethod(Outer.Middle request) {
    return nestedMessageMethodCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Sample code:
   *
   * <pre>{@code
   * // This snippet has been automatically generated and should be regarded as a code template only.
   * // It will require modifications to work:
   * // - It may require correct/in-range values for request initialization.
   * // - It may require specifying regional endpoints when creating the service client as shown in
   * // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library
   * try (NestedMessageServiceClient nestedMessageServiceClient =
   *     NestedMessageServiceClient.create()) {
   *   Outer.Middle request = Outer.Middle.newBuilder().setX(120).build();
   *   ApiFuture<Outer.Middle.Inner> future =
   *       nestedMessageServiceClient.nestedMessageMethodCallable().futureCall(request);
   *   // Do something.
   *   Outer.Middle.Inner response = future.get();
   * }
   * }</pre>
   */
  public final UnaryCallable<Outer.Middle, Outer.Middle.Inner> nestedMessageMethodCallable() {
    return stub.nestedMessageMethodCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }
}
