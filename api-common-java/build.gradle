import groovy.io.FileType

buildscript {
  repositories {
    mavenLocal()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
  }
  dependencies {
    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9",
      "io.github.gradle-nexus:publish-plugin:1.1.0"
  }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: 'io.github.gradle-nexus.publish-plugin'


group = "com.google.api"
archivesBaseName = "api-common"

project.version = "2.3.1" // {x-version-update:api-common:current}

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco {
    toolVersion = "0.8.8"
}

// Dependencies
// ------------

ext {
  // Shortcuts for libraries we are using
  libraries = [
      javax_annotations: 'javax.annotation:javax.annotation-api:1.3.2',
      auto_value: 'com.google.auto.value:auto-value:1.10.1',
      auto_value_annotations: 'com.google.auto.value:auto-value-annotations:1.10.1',
      guava: 'com.google.guava:guava:31.1-jre',
      jsr305: 'com.google.code.findbugs:jsr305:3.0.2',
      error_prone_annotations: 'com.google.errorprone:error_prone_annotations:2.17.0',

      // Testing
      junit: 'junit:junit:4.13.2',
      truth: 'com.google.truth:truth:1.1.3',
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {

  annotationProcessor libraries.auto_value

  implementation( libraries.guava,
    libraries.jsr305,
    libraries.javax_annotations,
    libraries.auto_value_annotations)

  compileOnly libraries.error_prone_annotations

  testImplementation(libraries.junit,
    libraries.truth)
}

clean.doFirst {
  delete 'tmp_gh-pages/'
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

check.dependsOn jacocoTestReport

// jar with automatic module name:
jar {
  manifest {
    attributes('Automatic-Module-Name': 'com.google.api.apicommon')
  }
}

// Source jar
// ----------
project.gradle.taskGraph.whenReady {
  println project.gradle.taskGraph.getAllTasks()
}
task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

// JavaDoc
// -------

task javadocJar(type: Jar) {
  archiveClassifier = 'javadoc'
  from javadoc
}

javadoc.options {
  encoding = 'UTF-8'
  links 'https://docs.oracle.com/javase/7/docs/api/'
}

// JavaDocV3
// -------

task javadocJarV3(type: Jar) {
  archiveClassifier = 'javadoc'
  from javadoc
}

javadoc.options {
  encoding = 'UTF-8'
  links 'https://docs.oracle.com/javase/7/docs/api/'

  if (JavaVersion.current().isJava8Compatible()) {
    addStringOption('Xdoclint:all,-missing', '-quiet')
  }
  if (JavaVersion.current().isJava11Compatible()) {
    addStringOption('-release', '7')
  }
}

// Test Logging
// ------------

test {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat = 'full'
  }
}


// Eclipse Annotation Processing
// -----------------------------

ext {
  eclipseAptFolder = '.apt_generated'
  eclipseSettingsDir = file('.settings')
}

configurations {
  codeGeneration
}

dependencies {
  codeGeneration libraries.auto_value, libraries.jsr305
  implementation(libraries.jsr305, libraries.auto_value_annotations)
}

compileJava.classpath += configurations.codeGeneration

eclipse {
  jdt.file.withProperties {
    it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
  }
}

tasks.eclipseJdt {
  doFirst {
    def aptPrefs =
        file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
    aptPrefs.parentFile.mkdirs()

    aptPrefs.text = """\
        eclipse.preferences.version=1
        org.eclipse.jdt.apt.aptEnabled=true
        org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
        org.eclipse.jdt.apt.reconcileEnabled=true
        """.stripIndent()

    file('.factorypath').withWriter {
      new groovy.xml.MarkupBuilder(it).'factorypath' {
        project.configurations.codeGeneration.each { dep->
          factorypathentry(
            kind:'EXTJAR',
            id:dep.absolutePath,
            enabled:true,
            runInBatchMode:false)
        }
      }
    }
  }
}

tasks.cleanEclipseJdt {
  doFirst {
    delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
      file('.factorypath')
  }
}

// Publishing
// ----------

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  if (project.hasProperty('signing.gnupg.executable')) {
    useGpgCmd()
  }
  sign configurations.archives
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
  nexusPublishing {
    packageGroup = "com.google.api"
    repositories {
      sonatype {   //or custom repository name
        nexusUrl.set(uri('https://google.oss.sonatype.org/service/local/'))
        snapshotRepositoryUrl.set(uri('https://google.oss.sonatype.org/content/repositories/snapshots/'))
        username = ossrhUsername
        password = ossrhPassword
      }
    }
  }
}

afterEvaluate {
  publishing {
    publications {
      mavenJava(MavenPublication) {
        version = project.version

        from components.java

        artifact javadocJar
        artifact sourcesJar

        pom {
          name = 'API Common'
          packaging = 'jar'
          artifactId = 'api-common'
          description = 'Common utilities for Google APIs in Java'
          url = 'https://github.com/googleapis/api-common-java'

          scm {
            url = 'https://github.com/googleapis/api-common-java'
            connection = 'scm:git:https://github.com/googleapis/api-common-java.git'
          }

          licenses {
            license {
              name = 'BSD'
              url = 'https://github.com/googleapis/api-common-java/blob/master/LICENSE'
            }
          }

          developers {
            developer {
              id = 'GoogleAPIs'
              name = 'GoogleAPIs'
              email = 'googleapis@googlegroups.com'
              url = 'https://github.com/googleapis'
              organization = 'Google, Inc.'
              organizationUrl = 'https://www.google.com'
            }
          }
        }
      }
    }
    repositories {
      maven {
        url 'https://google.oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username = project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : null
          password = project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : null
        }
      }
    }
  }

  signing {
    if (!project.hasProperty('skip.signing')) {
      if (project.hasProperty('signing.gnupg.executable')) {
        useGpgCmd()
      }
      sign publishing.publications
    }
  }
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  }
}

// Formatting tasks
// ================

task verifyLicense {
  doLast {
    def licenseText = new File(rootProject.rootDir, 'license-header-javadoc.txt').text
    def srcFiles = []
    sourceSets
        .collectMany{it.allJava.getSrcDirs()}
        .each{it.eachFileRecurse(FileType.FILES, {srcFiles << new Tuple(it, it.text)})}
    srcFiles = srcFiles
        .findAll{it.get(0).path.endsWith(".java")}
        .collect{new Tuple(it.get(0), it.get(1).replaceAll("Copyright 20[0-9]{2}", "Copyright 20xx"))}
        .findAll{!it.get(1).startsWith(licenseText)}
    if (srcFiles.asList().size() > 0) {
      srcFiles.each({println 'missing license: ' + it.get(0)})
      throw new IllegalStateException("Above files do not have licenses")
    }
  }
}
test.dependsOn verifyLicense

googleJavaFormat {
  toolVersion '1.0'
}
tasks.googleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
}
tasks.verifyGoogleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
}
test.dependsOn verifyGoogleJavaFormat

// JavaDocV3 docFX
//
task javadocCombinedV3(type: Javadoc) {
  source project.sourceSets.main.allJava
  classpath = files(project.sourceSets.main.compileClasspath)
  destinationDir = new File(projectDir, 'tmp_docs/docfx-yml')

  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption("doclet", "com.microsoft.doclet.DocFxDoclet")
  options.addStringOption("projectname", "api-common")
  options.docletpath = [file(System.getenv('KOKORO_GFILE_DIR') + "/java-docfx-doclet-1.5.0.jar")]
  // Newer Gradle 6 passes -notimestamp by default, which the doclet above doesn't understand:
  // https://github.com/gradle/gradle/issues/11898
  options.noTimestamp false
}

clean {
  delete 'tmp_gh-pages/'
  delete 'tmp_docs/'
}


// Release
// =======

task checkOutGhPages {
  doLast {
    if (!new File('tmp_gh-pages').exists()) {
      exec {
        commandLine 'git', 'clone', '--branch', 'gh-pages',
            '--single-branch', 'https://github.com/googleapis/api-common-java/', 'tmp_gh-pages'
      }
    }
  }
}

task copyFilesToGhPages {
  dependsOn 'checkOutGhPages'
  dependsOn 'javadoc'
  doLast {
    def newSiteDirPath = 'tmp_gh-pages/' + project.version + '/apidocs/'
    new File(newSiteDirPath).mkdirs()
    copy {
      from 'build/docs/javadoc'
      into newSiteDirPath
    }
    copy {
      from 'README.md'
      into 'tmp_gh-pages'
      rename { filename -> filename.replace 'README', 'index' }
    }
  }
}

task createApiDocsRedirect {
  dependsOn 'copyFilesToGhPages'
  doLast {
    def template = new File('templates/apidocs_index.html.template').text
    def outputContent = template.replace('{{siteVersion}}', project.version)
    new File('tmp_gh-pages/apidocs/index.html').write(outputContent)
  }
}

task publishDocs {
  dependsOn 'closeAndReleaseSonatypeStagingRepository'
  doLast {
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'add', '.'
    }
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'commit', '-m', 'Release docs for ' + project.version
    }
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'push'
    }
  }
}

// 1. Regenerates the gh-pages branch under tmp_gh-pages
// 2. Stages the artifact on Sonatype
task stageRelease {
  dependsOn 'createApiDocsRedirect'
  doLast {
    exec {
      commandLine './gradlew', 'uploadArchives'
    }
  }
}

// 1. Closes and releases the artifact on Sonatype
// 2. Commits and pushes the new docs
// 3. Removes tmp_gh-pages
// Note: This task assumes that the 'stageRelease' task has been completed.
task finalizeRelease {
  dependsOn 'publishDocs'
  doLast {
    exec {
      commandLine 'rm', '-r', 'tmp_gh-pages'
    }
  }
}
