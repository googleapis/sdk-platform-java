# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 7200s # 2 hours
substitutions:
    _TEST_IMAGE: "test-image:latest"
steps:
- name: gcr.io/cloud-builders/docker
  args: [
      "build",
      "-t", "${_TEST_IMAGE}",
      "-f", ".cloudbuild/library_generation/library_generation_airlock.Dockerfile",
      "."
  ]
  id: build-image
  waitFor: ["-"]
  env:
  - "DOCKER_BUILDKIT=1"

- name: ubuntu:24.04
  entrypoint: bash
  args:
  - "-c"
  - |
    apt update && apt install -y git
    cd /workspace
    git clone https://github.com/googleapis/googleapis
    cd googleapis
    git checkout 113a378d5aad5018876ec0a8cbfd4d6a4f746809
  id: download-api-definitions
  waitFor: ["-"]

- name: ubuntu:24.04
  entrypoint: bash
  args:
  - "-c"
  - |
    apt update && apt install -y git
    cd /workspace
    git clone https://github.com/googleapis/google-cloud-java
    cd google-cloud-java
    git switch 113a378d5aad5018876ec0a8cbfd4d6a4f746809
    git checkout chore/test-hermetic-build
    mkdir ../golden
    cd ../golden
    cp -r ../google-cloud-java/java-apigee-connect .
    cp -r ../google-cloud-java/java-alloydb .
    cp -r ../google-cloud-java/java-alloydb-connectors .
    cp -r ../google-cloud-java/java-cloudcontrolspartner .
    cp -r ../google-cloud-java/gapic-libraries-bom .
    cp -r ../google-cloud-java/pom.xml .
  id: prepare-golden
  waitFor: ["-"]

#- name: ubuntu:24.04
#  entrypoint: bash
#  args:
#  - "-c"
#  - |
#    # Install docker
#    apt update
#    apt install -y ca-certificates curl gnupg lsb-release
#    mkdir -p /etc/apt/keyrings
#    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
#       gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#    echo \
#       "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
#       $(lsb_release -cs) stable" | \
#       tee /etc/apt/sources.list.d/docker.list > /dev/null
#    apt update
#    apt -y install \
#       docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#    docker run \
#      --rm \
#      --quiet \
#      -u "$(id -u):$(id -g)" \
#      -v "/workspace/google-cloud-java:/workspace" \
#      -v "/workspace/hermetic_build/library_generation/tests/resources/integration/google-cloud-java:/workspace/config" \
#      -v "/workspace/googleapis:/workspace/apis" \
#      "${_TEST_IMAGE}" \
#      --generation-config-path="/workspace/config/generation_config.yaml" \
#      --api-definitions-path="/workspace/apis"
#  id: generate-libraries
#  waitFor: [
#    "build-image",
#    "download-api-definitions",
#    "prepare-golden"
#  ]

- name: gcr.io/cloud-builders/docker
  args: [
    "run",
    "--rm",
    "-v", "/workspace/google-cloud-java:/workspace",
    "-v", "/workspace/hermetic_build/library_generation/tests/resources/integration/google-cloud-java:/workspace/config",
    "-v", "/workspace/googleapis:/workspace/apis",
    "${_TEST_IMAGE}",
    "--generation-config-path=/workspace/config/generation_config.yaml",
    "--api-definitions-path=/workspace/apis"
  ]
  env:
  - "DOCKER_BUILDKIT=1"
  id: generate-libraries
  waitFor: [
    "build-image",
    "download-api-definitions",
    "prepare-golden"
  ]

- name: ubuntu:24.04
  entrypoint: bash
  args:
  - "-c"
  - |
    apt update && apt install -y python3 python3.12-venv
    python3 -m venv .venv
    source .venv/bin/activate
    pip install --require-hashes -r .cloudbuild/library_generation/scripts/requirements.txt
    python -m unittest .cloudbuild/library_generation/scripts/integration_tests.py
  id: verify-generation
  waitFor: ["generate-libraries"]
options:
  logging: CLOUD_LOGGING_ONLY
