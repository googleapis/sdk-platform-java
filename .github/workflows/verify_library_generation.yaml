on:
  pull_request:

name: verify_library_generation
jobs:
  should-run-library-generation-tests:
    runs-on: ubuntu-22.04
    outputs:
      should_run: ${{ steps.get_changed_directories.outputs.should_run }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: get changed directories in the pull request
      id: get_changed_directories
      shell: bash
      run: |
        set -ex
        # Checkout a detached head, and then fetch the base ref to populate the detached head.
        git checkout "${base_ref}"
        git fetch --no-tags --prune origin +${base_ref}:refs/remotes/origin/${base_ref}
        # Checkout a detached head, and then fetch the head ref to populate the detached head.
        git checkout "${head_ref}"
        git fetch --no-tags --prune origin +${head_ref}:refs/remotes/origin/${head_ref}
        changed_directories="$(git diff --name-only ${base_ref} ${head_ref})"
        if [[ ${changed_directories} =~ "library_generation/" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi
      env:
        base_ref: ${{ github.event.pull_request.base.ref }}
        head_ref: ${{ github.event.pull_request.head.ref }}
  library-generation-integration-tests:
    runs-on: ubuntu-22.04
    needs: should-run-library-generation-tests
    if: needs.should-run-library-generation-tests.outputs.should_run == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: install pyenv
      shell: bash
      run: |
        set -ex
        curl https://pyenv.run | bash
        # setup environment
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        echo "PYENV_ROOT=${PYENV_ROOT}" >> $GITHUB_ENV
        echo "PATH=${PATH}" >> $GITHUB_ENV

        set +ex
    - name: install python dependencies
      shell: bash
      run: |
        set -ex
        pushd library_generation
        pip install -r requirements.txt
        pip install .
        popd
    - name: Run integration tests
      shell: bash
      run: |
        set -x
        python -m unittest library_generation/test/integration_tests.py
  library-generation-unit-tests:
    runs-on: ${{ matrix.os }}
    needs: should-run-library-generation-tests
    if: needs.should-run-library-generation-tests.outputs.should_run == 'true'
    strategy:
      matrix:
        java: [ 8 ]
        os: [ ubuntu-22.04, macos-12 ]
    steps:
    - uses: actions/checkout@v4
    - name: install utils (macos)
      if: matrix.os == 'macos-12'
      shell: bash
      run: |
        brew update --preinstall
        brew install coreutils
    - uses: actions/setup-python@v5
      with:
        python-version: 3.11
    - name: install python dependencies
      shell: bash
      run: |
        set -ex
        pushd library_generation
        pip install -r requirements.txt
        popd
    - name: install synthtool
      shell: bash
      run: |
        set -ex
        mkdir -p /tmp/synthtool
        pushd /tmp/synthtool
        if [ ! -d "synthtool" ]; then
          git clone https://github.com/googleapis/synthtool.git
        fi
        pushd "synthtool"

        git reset --hard origin/no-java-templates

        python3 -m pip install -e .
        python3 -m pip install -r requirements.in
    - name: Run shell unit tests
      run: |
        set -x
        library_generation/test/generate_library_unit_tests.sh
    - name: Run python unit tests
      run: |
        set -x
        python -m unittest discover -s library_generation/test/ -p "*unit_tests.py"
  library-generation-lint-shell:
    runs-on: ubuntu-22.04
    needs: should-run-library-generation-tests
    if: needs.should-run-library-generation-tests.outputs.should_run == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@2.0.0
      with:
        scandir: 'library_generation'
        format: tty
        severity: error
  library-generation-lint-python:
    runs-on: ubuntu-22.04
    needs: should-run-library-generation-tests
    if: needs.should-run-library-generation-tests.outputs.should_run == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: install python dependencies
      shell: bash
      run: |
        set -ex
        pushd library_generation
        pip install -r requirements.txt
        popd
    - name: Lint
      shell: bash
      run: |
        # exclude generated golden files
        # exclude owlbot until further refaction
        black --check library_generation --exclude "(library_generation/test/resources/goldens)"
