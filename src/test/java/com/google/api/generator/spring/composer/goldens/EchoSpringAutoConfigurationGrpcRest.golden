package com.google.showcase.v1beta1.spring;

import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.Credentials;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.cloud.spring.core.Retry;
import com.google.cloud.spring.core.util.RetryUtils;
import com.google.cloud.spring.global.GlobalProperties;
import com.google.showcase.v1beta1.EchoClient;
import com.google.showcase.v1beta1.EchoSettings;
import java.io.IOException;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Auto-configuration for {@link EchoClient}.
 *
 * <p>Provides auto-configuration for Spring Boot
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 *   <li>The default transport provider is used.
 *   <li>Credentials are acquired automatically through Application Default Credentials.
 *   <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 */
@AutoConfiguration
@ConditionalOnClass(EchoClient.class)
@ConditionalOnProperty(
    value = "com.google.showcase.v1beta1.spring.auto.echo.enabled",
    matchIfMissing = true)
@EnableConfigurationProperties({EchoSpringProperties.class, GlobalProperties.class})
public class EchoSpringAutoConfiguration {
  private final EchoSpringProperties clientProperties;
  private final GlobalProperties globalProperties;
  private static final Log LOGGER = LogFactory.getLog(EchoSpringAutoConfiguration.class);

  protected EchoSpringAutoConfiguration(
      EchoSpringProperties clientProperties, GlobalProperties globalProperties) {
    this.clientProperties = clientProperties;
    this.globalProperties = globalProperties;
  }

  /**
   * Obtains the default credentials provider. The used key will be obtained from Spring Boot
   * configuration data files.
   */
  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider echoCredentials() throws IOException {
    if (this.clientProperties.getCredentials().hasKey()) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using credentials from Echo-specific configuration");
      }
      return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("Using credentials from global configuration");
    }
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.globalProperties));
  }

  /**
   * Returns the default channel provider. The default is gRPC and will default to it unless the
   * useRest option is provided to use HTTP transport instead
   */
  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEchoTransportChannelProvider() {
    return EchoSettings.defaultTransportChannelProvider();
  }

  /**
   * Provides a EchoClient bean configured to use the default credentials provider (obtained with
   * echoCredentials()) and its default transport channel provider
   * (defaultEchoTransportChannelProvider()). It also configures the quota project ID if provided.
   * It will configure an executor provider in case there is more than one thread configured in the
   * client
   *
   * <p>Individual retry settings are configured as well. It will use the relevant client library's
   * default retry settings when they are not specified in EchoSpringProperties.
   */
  @Bean
  @ConditionalOnMissingBean
  public EchoSettings echoSettings(
      @Qualifier("echoCredentials") CredentialsProvider credentialsProvider,
      @Qualifier("defaultEchoTransportChannelProvider")
          TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EchoSettings.Builder clientSettingsBuilder =
        EchoSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider(this.userAgentHeaderProvider());
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Quota project id set to "
                + this.clientProperties.getQuotaProjectId()
                + ", this overrides project id from credentials.");
      }
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EchoSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(
            "Background executor thread count is "
                + this.clientProperties.getExecutorThreadCount());
      }
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EchoSettings.defaultHttpJsonTransportProviderBuilder().build());
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Using HTTP transport channel");
      }
    }
    Retry serviceRetrySettings = clientProperties.getRetrySettings();
    if (serviceRetrySettings != null) {
      RetrySettings echoRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.echoSettings().getEchoRetrySettings(), serviceRetrySettings);
      clientSettingsBuilder.echoSettings().setEchoRetrySettings(echoRetrySettings);
      RetrySettings expandRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.expandSettings().getExpandRetrySettings(),
              serviceRetrySettings);
      clientSettingsBuilder.expandSettings().setExpandRetrySettings(expandRetrySettings);
      RetrySettings collectRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.collectSettings().getCollectRetrySettings(),
              serviceRetrySettings);
      clientSettingsBuilder.collectSettings().setCollectRetrySettings(collectRetrySettings);
      RetrySettings chatRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.chatSettings().getChatRetrySettings(), serviceRetrySettings);
      clientSettingsBuilder.chatSettings().setChatRetrySettings(chatRetrySettings);
      RetrySettings chatAgainRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.chatAgainSettings().getChatAgainRetrySettings(),
              serviceRetrySettings);
      clientSettingsBuilder.chatAgainSettings().setChatAgainRetrySettings(chatAgainRetrySettings);
      RetrySettings pagedExpandRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.pagedExpandSettings().getPagedExpandRetrySettings(),
              serviceRetrySettings);
      clientSettingsBuilder
          .pagedExpandSettings()
          .setPagedExpandRetrySettings(pagedExpandRetrySettings);
      RetrySettings simplePagedExpandRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.simplePagedExpandSettings().getSimplePagedExpandRetrySettings(),
              serviceRetrySettings);
      clientSettingsBuilder
          .simplePagedExpandSettings()
          .setSimplePagedExpandRetrySettings(simplePagedExpandRetrySettings);
      RetrySettings waitRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.waitSettings().getWaitRetrySettings(), serviceRetrySettings);
      clientSettingsBuilder.waitSettings().setWaitRetrySettings(waitRetrySettings);
      RetrySettings blockRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.blockSettings().getBlockRetrySettings(), serviceRetrySettings);
      clientSettingsBuilder.blockSettings().setBlockRetrySettings(blockRetrySettings);
      RetrySettings collideNameRetrySettings =
          RetryUtils.updateRetrySettings(
              clientSettingsBuilder.collideNameSettings().getCollideNameRetrySettings(),
              serviceRetrySettings);
      clientSettingsBuilder
          .collideNameSettings()
          .setCollideNameRetrySettings(collideNameRetrySettings);
    }
    return clientSettingsBuilder.build();
  }

  @Bean
  @ConditionalOnMissingBean
  public EchoClient echoClient(EchoSettings echoSettings) throws IOException {
    return EchoClient.create(echoSettings);
  }

  private HeaderProvider userAgentHeaderProvider() {
    String springLibrary = "spring-autogen-echo";
    String version = this.getClass().getPackage().getImplementationVersion();
    return () -> Collections.singletonMap("user-agent", springLibrary + "/" + version);
  }
}
