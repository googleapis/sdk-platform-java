package com.google.showcase.v1beta1.spring;

import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.cloud.spring.core.DefaultCredentialsProvider;
import com.google.common.collect.ImmutableMap;
import com.google.showcase.v1beta1.EchoClient;
import com.google.showcase.v1beta1.EchoSettings;
import java.io.IOException;
import javax.annotation.Generated;
import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;

@Generated("by gapic-generator-java")
@AutoConfiguration
@ConditionalOnClass("value = EchoClient.class")
@ConditionalOnProperty(
    "value = \"spring.cloud.gcp.autoconfig.showcase.echo.enabled\", matchIfMissing = false")
@EnableConfigurationProperties("EchoSpringProperties.Class")
public class EchoSpringAutoConfiguration {
  private final EchoSpringProperties clientProperties;
  private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
    RetrySettings settings = null;
    settings = RetrySettings.newBuilder().setRpcTimeoutMultiplier(1.0).build();
    definitions.put("no_retry_params", settings);
    RETRY_PARAM_DEFINITIONS = definitions.build();
  }

  protected EchoSpringAutoConfiguration(EchoSpringProperties clientProperties) {
    this.clientProperties = clientProperties;
  }

  @Bean
  @ConditionalOnMissingBean
  public CredentialsProvider googleCredentials() throws IOException {
    return ((CredentialsProvider) new DefaultCredentialsProvider(this.clientProperties));
  }

  @Bean
  @ConditionalOnMissingBean
  public TransportChannelProvider defaultEchoTransportChannelProvider() {
    return EchoSettings.defaultTransportChannelProvider();
  }

  @Bean
  @ConditionalOnMissingBean
  public EchoClient echoClient(
      CredentialsProvider credentialsProvider,
      TransportChannelProvider defaultTransportChannelProvider)
      throws IOException {
    EchoSettings.Builder clientSettingsBuilder =
        EchoSettings.newBuilder()
            .setCredentialsProvider(credentialsProvider)
            .setTransportChannelProvider(defaultTransportChannelProvider)
            .setHeaderProvider();
    if (this.clientProperties.getQuotaProjectId() != null) {
      clientSettingsBuilder.setQuotaProjectId(this.clientProperties.getQuotaProjectId());
    }
    if (this.clientProperties.getExecutorThreadCount() != null) {
      ExecutorProvider executorProvider =
          EchoSettings.defaultExecutorProviderBuilder()
              .setExecutorThreadCount(this.clientProperties.getExecutorThreadCount())
              .build();
      clientSettingsBuilder.setBackgroundExecutorProvider(executorProvider);
    }
    if (this.clientProperties.getUseRest()) {
      clientSettingsBuilder.setTransportChannelProvider(
          EchoSettings.defaultHttpJsonTransportProviderBuilder().build());
    }
    RetrySettings.Builder echoRetrySettingBuilder =
        clientSettingsBuilder.echoSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getEchoRpcTimeoutMultiplier() != null) {
      echoRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getEchoRpcTimeoutMultiplier());
    }
    clientSettingsBuilder.echoSettings().setRetrySettings(echoRetrySettingBuilder.build());
    RetrySettings.Builder expandRetrySettingBuilder =
        clientSettingsBuilder.expandSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getExpandRpcTimeoutMultiplier() != null) {
      expandRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getExpandRpcTimeoutMultiplier());
    }
    clientSettingsBuilder.expandSettings().setRetrySettings(expandRetrySettingBuilder.build());
    RetrySettings.Builder collectRetrySettingBuilder =
        clientSettingsBuilder.collectSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCollectRpcTimeoutMultiplier() != null) {
      collectRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCollectRpcTimeoutMultiplier());
    }
    clientSettingsBuilder.collectSettings().setRetrySettings(collectRetrySettingBuilder.build());
    RetrySettings.Builder chatRetrySettingBuilder =
        clientSettingsBuilder.chatSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getChatRpcTimeoutMultiplier() != null) {
      chatRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getChatRpcTimeoutMultiplier());
    }
    clientSettingsBuilder.chatSettings().setRetrySettings(chatRetrySettingBuilder.build());
    RetrySettings.Builder chatAgainRetrySettingBuilder =
        clientSettingsBuilder.chatAgainSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getChatAgainRpcTimeoutMultiplier() != null) {
      chatAgainRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getChatAgainRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .chatAgainSettings()
        .setRetrySettings(chatAgainRetrySettingBuilder.build());
    RetrySettings.Builder pagedExpandRetrySettingBuilder =
        clientSettingsBuilder.pagedExpandSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getPagedExpandRpcTimeoutMultiplier() != null) {
      pagedExpandRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getPagedExpandRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .pagedExpandSettings()
        .setRetrySettings(pagedExpandRetrySettingBuilder.build());
    RetrySettings.Builder simplePagedExpandRetrySettingBuilder =
        clientSettingsBuilder.simplePagedExpandSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getSimplePagedExpandRpcTimeoutMultiplier() != null) {
      simplePagedExpandRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getSimplePagedExpandRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .simplePagedExpandSettings()
        .setRetrySettings(simplePagedExpandRetrySettingBuilder.build());
    RetrySettings.Builder waitRetrySettingBuilder =
        clientSettingsBuilder.waitSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getWaitRpcTimeoutMultiplier() != null) {
      waitRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getWaitRpcTimeoutMultiplier());
    }
    clientSettingsBuilder.waitSettings().setRetrySettings(waitRetrySettingBuilder.build());
    RetrySettings.Builder blockRetrySettingBuilder =
        clientSettingsBuilder.blockSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getBlockRpcTimeoutMultiplier() != null) {
      blockRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getBlockRpcTimeoutMultiplier());
    }
    clientSettingsBuilder.blockSettings().setRetrySettings(blockRetrySettingBuilder.build());
    RetrySettings.Builder collideNameRetrySettingBuilder =
        clientSettingsBuilder.collideNameSettings().getRetrySettings().toBuilder();
    if (this.clientProperties.getCollideNameRpcTimeoutMultiplier() != null) {
      collideNameRetrySettingBuilder.setRpcTimeoutMultiplier(
          this.clientProperties.getCollideNameRpcTimeoutMultiplier());
    }
    clientSettingsBuilder
        .collideNameSettings()
        .setRetrySettings(collideNameRetrySettingBuilder.build());
    return EchoClient.create(clientSettingsBuilder.build());
  }
}
